package org.knime.rankaggregation;

import org.knime.core.node.NodeDialogPane;
import org.knime.core.node.NodeFactory;
import org.knime.core.node.NodeView;

/**
 * @author Randy Reyna Hernandez
 * 
 *         <code>NodeFactory</code> for the "EDFReader" Node. This node reads in
 *         Election Data Format (EDF) from an URL. In the configuration dialog
 *         specify a valid URL and set an optional row prefix. A row ID is
 *         generated by the reader in the form 'prefix + rownumber'. If no
 *         prefix is specified, the row IDs are just the row numbers.
 *
 */
public class EDFReaderNodeFactory extends NodeFactory<EDFReaderNodeModel> {

	private final String m_fileURL;

	/**
	 * Will deliver a model with no default file set.
	 */
	public EDFReaderNodeFactory() {
		m_fileURL = null;
	}

	/**
	 * This factory will create a model with the file set as default file.
	 *
	 * @param fileURL
	 *            a valid URL to the default ARFF file.
	 */
	public EDFReaderNodeFactory(final String fileURL) {
		m_fileURL = fileURL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public EDFReaderNodeModel createNodeModel() {
		if (m_fileURL == null) {
			return new EDFReaderNodeModel();
		} else {
			return new EDFReaderNodeModel(m_fileURL);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int getNrNodeViews() {
		return 0;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public NodeView<EDFReaderNodeModel> createNodeView(final int viewIndex, final EDFReaderNodeModel nodeModel) {
		assert false;
		return null;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean hasDialog() {
		return true;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public NodeDialogPane createNodeDialogPane() {
		return new EDFReaderNodeDialog();
	}

}
