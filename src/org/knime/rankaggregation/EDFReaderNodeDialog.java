package org.knime.rankaggregation;

import org.knime.core.node.defaultnodesettings.DefaultNodeSettingsPane;
import org.knime.core.node.defaultnodesettings.DialogComponentFileChooser;
import org.knime.core.node.defaultnodesettings.DialogComponentString;
import org.knime.core.node.defaultnodesettings.SettingsModelString;

/**
 * 
 * @author Randy Reyna Hernandez
 * 
 *         <code>NodeDialog</code> for the "EDFReader" Node. This node reads in
 *         Election Data Format (EDF) from an URL. In the configuration dialog
 *         specify a valid URL and set an optional row prefix. A row ID is
 *         generated by the reader in the form 'prefix + rownumber'. If no
 *         prefix is specified, the row IDs are just the row numbers.
 *
 *         This node dialog derives from {@link DefaultNodeSettingsPane} which
 *         allows creation of a simple dialog with standard components. If you
 *         need a more complex dialog please derive directly from
 *         {@link org.knime.core.node.NodeDialogPane}.
 * 
 */
public class EDFReaderNodeDialog extends DefaultNodeSettingsPane {

	/**
	 * New pane for configuring EDFReader node dialog. This is just a suggestion
	 * to demonstrate possible default dialog components.
	 */
	protected EDFReaderNodeDialog() {
		createNewGroup("Input location:");
		addDialogComponent(
				new DialogComponentFileChooser(new SettingsModelString(EDFReaderNodeModel.CFGKEY_FILEURL, null),
						"historyId", ".soc", ".soi", ".toc", ".toi", ".tog", ".mjg", ".wmg", ".pwg", ".wmd"));
		createNewGroup("Reader options:");
		addDialogComponent(new DialogComponentString(
				new SettingsModelString(EDFReaderNodeModel.CFGKEY_ROWPREFIX, "Voter"), "RowID prefix:"));
	}
}
